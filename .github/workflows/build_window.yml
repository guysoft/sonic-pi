name: Build

on:
  # Do it on every push or PR on these branches
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  # Build Sonic Pi
  build:
    name: "${{matrix.title}} (${{matrix.cc}}, ${{matrix.arch}}, ${{matrix.build_type}})"
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
           - { title: "Windows", os: "windows-latest", cc: "vs2019", arch: "x64", build_type: "Release" }
           #- { title: "Windows", os: "windows-latest", cc: "vs2019", arch: "x64", build_type: "Debug" }


    steps:

    # Get the code
    - uses: actions/checkout@v2

    # Install Ruby for the windows build
    - uses: ruby/setup-ruby@v1
      id: ruby-inst
      with:
        ruby-version: 2.7
        bundler-cache: true
      if: matrix.os == 'windows-latest'

    # Install gems Windows
    - name: Setup Ruby Windows
      working-directory: ${{github.workspace}}/app
      run: |
          gem install win32-process
          gem install rugged --version 0.27.1
          gem install ffi
          gem install test-unit
      if: matrix.os == 'windows-latest'


    # For windows we build a symlink in the bash shell because the windows method does not seem to work.
    - name: Add SymLink for Windows
      working-directory: ${{github.workspace}}/app/server/native
      run: |
        ln -s ${{steps.ruby-inst.outputs.ruby-prefix}} ruby
      if: matrix.os == 'windows-latest'

      # Keep a cached copy of the Qt build so we can speed up subsequent builds
    - name: Cache Qt
      id: cache-qt2
      uses: actions/cache@v1
      with:
        path: ../Qt2
        key: ${{ runner.os }}-QtCache2

      # Get Qt
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt2.outputs.cache-hit }}


      # Install Elixir on Windows
    - name: Win Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: '24'
        elixir-version: '1.12'
      if: matrix.os == 'windows-latest'



    # Prebuild on Windows
    # Note that we 'hide' the msys folders on windows to stop conflicts when building
    # Flac
    - name: Prebuild Windows
      working-directory: ${{github.workspace}}/app
      shell: cmd
      env:
        CC: ${{ matrix.cc }}
        QT_INSTALL_LOCATION: ${{env.Qt5_DIR}}
      run: |
        mv c:/msys64 c:/__msys64
        win-prebuild.bat
      if: matrix.os == 'windows-latest'

      # Run Configuration Config on Windows
    - name: Config Windows
      working-directory: ${{github.workspace}}/app
      shell: cmd
      env:
        CC: ${{ matrix.cc }}
        QT_INSTALL_LOCATION: ${{env.Qt5_DIR}}
      run: |
        win-config.bat
      if: matrix.os == 'windows-latest'

    # Finally: Build
    - name: Do build
      working-directory: ${{github.workspace}}/app/build
      run: cmake --build . --config ${{ matrix.build_type }}
      
    # installer pack
    - name: Do pack
      working-directory: ${{github.workspace}}/install/windows
      run: |
       $env:Path += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"
       install.bat

    # - name: API Tests Windows - Install Scream Audio Device
    #   shell: powershell
    #   run: |
    #     Start-Service audio*
    #     Invoke-WebRequest https://github.com/duncanthrax/scream/releases/download/3.6/Scream3.6.zip -OutFile C:\Scream3.6.zip
    #     Extract-7Zip -Path C:\Scream3.6.zip -DestinationPath C:\Scream
    #     $cert = (Get-AuthenticodeSignature C:\Scream\Install\driver\Scream.sys).SignerCertificate
    #     $store = [System.Security.Cryptography.X509Certificates.X509Store]::new("TrustedPublisher", "LocalMachine")
    #     $store.Open("ReadWrite")
    #     $store.Add($cert)
    #     $store.Close()
    #     cd C:\Scream\Install\driver
    #     C:\Scream\Install\helpers\devcon install Scream.inf *Scream
    #   if: matrix.os == 'windows-latest'

    # - name: API Tests - Windows
    #   shell: cmd
    #   working-directory: ${{github.workspace}}/app/build/api-tests
    #   run: ctest --verbose
    #   if: matrix.os == 'windows-latest'
            
    - name: artifacts-windows
      uses: actions/upload-artifact@v2.2.4
      with:
          name: sonic-pi_${{matrix.title}}_${{matrix.arch}}_${{matrix.build_type}}
          path: |
            ${{github.workspace}}/install/windows/app
            ${{github.workspace}}/install/windows/etc
    
    - name: artifacts-windows-installer
      uses: actions/upload-artifact@v2.2.4
      with:
          name: sonic-pi_${{matrix.title}}_${{matrix.arch}}_${{matrix.build_type}}_installer
          path: |
            ${{github.workspace}}/install/windows/wix/Sonic-Pi.msi
